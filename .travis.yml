# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs 'applied-fp-course.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.ghc
    - $HOME/.stack

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
  - env: BUILD=cabal
    compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}

  - env: BUILD=cabal
    compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}

  - env: BUILD=cabal
    compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.2], sources: [hvr-ghc]}}

  - env: BUILD=cabal
    compiler: "ghc-8.4.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.4.1], sources: [hvr-ghc]}}

    # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
    # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-6"
    compiler: ": #stack 7.10.3"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--resolver lts-10"
    compiler: ": #stack 8.2.2"
    addons: {apt: {packages: [libgmp-dev]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on macOS in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx

  # Travis includes an macOS which is incompatible with GHC 7.8.4
  - env: BUILD=stack ARGS="--resolver lts-6"
    compiler: ": #stack 7.10.3 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: ": #stack 8.0.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-10"
    compiler: ": #stack 8.2.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER
  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

install:
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - INSTALLED=${INSTALLED-true}
  - GHCHEAD=${GHCHEAD-false}
  - |
    case "$BUILD" in
      stack)
        # Add in extra-deps for older snapshots, as necessary
        stack --no-terminal --install-ghc $ARGS build --bench --dry-run || ( \
          stack --no-terminal $ARGS build cabal-install && \
          stack --no-terminal $ARGS solver --update-config)

        # Build the dependencies
        stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
        ;;
      cabal)
        cabal --version
        travis_retry cabal update -v
        "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
        rm -fv cabal.project cabal.project.local
        grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
        "printf 'packages: \".\"\\n' > cabal.project"
        cat cabal.project
        if [ -f "./configure.ac" ]; then
          (cd "." && autoreconf -i);
        fi
        rm -f cabal.project.freeze
        cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
        cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
        rm -rf .ghc.environment.* "."/dist
        DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
        ;;
    esac

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  - |
    case "$BUILD" in
      stack)
        stack --no-terminal $ARGS build --no-run-benchmarks --haddock --no-haddock-deps
        ;;
      cabal)
        # test that source-distributions can be generated
        (cd "." && cabal sdist)
        mv "."/dist/applied-fp-course-*.tar.gz ${DISTDIR}/
        cd ${DISTDIR} || false
        find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
        "printf 'packages: applied-fp-course-*/*.cabal\\n' > cabal.project"
        cat cabal.project
        # this builds all libraries and executables (without tests/benchmarks)
        cabal new-configure -w ${HC} --enable-tests --ghc-options -O0
        cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

        # Build with installed constraints for packages in global-db
        if $INSTALLED;
        then
          echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh;
        else
          echo "Not building with installed constraints";
        fi

        # build & run tests, build benchmarks
        cabal new-build -w ${HC} ${TEST} ${BENCH} all
        if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

        # cabal check
        (cd applied-fp-course-* && cabal check)

        # haddock
        rm -rf ./dist-newstyle
        if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi
        ;;
    esac

# REGENDATA ["applied-fp-course.cabal"]
# EOF
